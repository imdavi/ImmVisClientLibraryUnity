// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: immvis.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from immvis.proto</summary>
public static partial class ImmvisReflection {

  #region Descriptor
  /// <summary>File descriptor for immvis.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ImmvisReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxpbW12aXMucHJvdG8iBwoFRW1wdHkiLgoVQXZhaWxhYmxlRGF0YXNldHNM",
          "aXN0EhUKDWRhdGFzZXRzUGF0aHMYASADKAkiKQoSTG9hZERhdGFzZXRSZXF1",
          "ZXN0EhMKC2RhdGFzZXRQYXRoGAEgASgJIloKFkdlbmVyYXRlRGF0YXNldFJl",
          "cXVlc3QSFQoNY29sdW1uc0Ftb3VudBgBIAEoBRISCgpyb3dzQW1vdW50GAIg",
          "ASgFEhUKDWNlbnRlcnNBbW91bnQYAyABKAUiKgoGQ29sdW1uEhIKCmNvbHVt",
          "bk5hbWUYASABKAkSDAoEdHlwZRgCIAEoCSJQChxEZXNjcmlwdGl2ZVN0YXRp",
          "c3RpY3NGZWF0dXJlEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAkSEwoL",
          "ZmVhdHVyZVR5cGUYAyABKAkiawoKQ29sdW1uSW5mbxIXCgZjb2x1bW4YASAB",
          "KAsyBy5Db2x1bW4SRAodZGVzY3JpcHRpdmVTdGF0aXN0aWNzRmVhdHVyZXMY",
          "AiADKAsyHS5EZXNjcmlwdGl2ZVN0YXRpc3RpY3NGZWF0dXJlIlwKD0RhdGFz",
          "ZXRNZXRhZGF0YRIRCglyb3dzQ291bnQYASABKAUSFAoMY29sdW1uc0NvdW50",
          "GAIgASgFEiAKC2NvbHVtbnNJbmZvGAMgAygLMgsuQ29sdW1uSW5mbyIzChtH",
          "ZXROb3JtYWxpc2VkRGF0YXNldFJlcXVlc3QSFAoMY29sdW1uc05hbWVzGAEg",
          "AygJIm4KEU5vcm1hbGlzZWREYXRhc2V0EhwKBHJvd3MYASADKAsyDi5Ob3Jt",
          "YWxpc2VkUm93EhQKDGNvbHVtbnNOYW1lcxgCIAMoCRIlCg1jb2x1bW5zTGFi",
          "ZWxzGAMgAygLMg4uQ29sdW1uc0xhYmVscyIfCg1Ob3JtYWxpc2VkUm93Eg4K",
          "BnZhbHVlcxgBIAMoAiIfCg1Db2x1bW5zTGFiZWxzEg4KBmxhYmVscxgBIAMo",
          "CSJFChVLTWVhbnNBbmFseXNpc1JlcXVlc3QSFAoMY29sdW1uc05hbWVzGAEg",
          "AygJEhYKDmNsdXN0ZXJzTnVtYmVyGAIgASgFImoKFktNZWFuc0FuYWx5c2lz",
          "UmVzcG9uc2USKQoNbGFiZWxzTWFwcGluZxgBIAEoCzISLk5vcm1hbGlzZWRE",
          "YXRhc2V0EiUKCWNlbnRyb2lkcxgCIAEoCzISLk5vcm1hbGlzZWREYXRhc2V0",
          "MtICCgxJbW1WaXNQYW5kYXMSOQoVTGlzdEF2YWlsYWJsZURhdGFzZXRzEgYu",
          "RW1wdHkaFi5BdmFpbGFibGVEYXRhc2V0c0xpc3QiABI2CgtMb2FkRGF0YXNl",
          "dBITLkxvYWREYXRhc2V0UmVxdWVzdBoQLkRhdGFzZXRNZXRhZGF0YSIAEkoK",
          "FEdldE5vcm1hbGlzZWREYXRhc2V0EhwuR2V0Tm9ybWFsaXNlZERhdGFzZXRS",
          "ZXF1ZXN0GhIuTm9ybWFsaXNlZERhdGFzZXQiABI+Cg9HZW5lcmF0ZURhdGFz",
          "ZXQSFy5HZW5lcmF0ZURhdGFzZXRSZXF1ZXN0GhAuRGF0YXNldE1ldGFkYXRh",
          "IgASQwoQRG9LTWVhbnNBbmFseXNpcxIWLktNZWFuc0FuYWx5c2lzUmVxdWVz",
          "dBoXLktNZWFuc0FuYWx5c2lzUmVzcG9uc2ViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Empty), global::Empty.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AvailableDatasetsList), global::AvailableDatasetsList.Parser, new[]{ "DatasetsPaths" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoadDatasetRequest), global::LoadDatasetRequest.Parser, new[]{ "DatasetPath" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GenerateDatasetRequest), global::GenerateDatasetRequest.Parser, new[]{ "ColumnsAmount", "RowsAmount", "CentersAmount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Column), global::Column.Parser, new[]{ "ColumnName", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DescriptiveStatisticsFeature), global::DescriptiveStatisticsFeature.Parser, new[]{ "Name", "Value", "FeatureType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ColumnInfo), global::ColumnInfo.Parser, new[]{ "Column", "DescriptiveStatisticsFeatures" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DatasetMetadata), global::DatasetMetadata.Parser, new[]{ "RowsCount", "ColumnsCount", "ColumnsInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetNormalisedDatasetRequest), global::GetNormalisedDatasetRequest.Parser, new[]{ "ColumnsNames" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NormalisedDataset), global::NormalisedDataset.Parser, new[]{ "Rows", "ColumnsNames", "ColumnsLabels" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NormalisedRow), global::NormalisedRow.Parser, new[]{ "Values" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ColumnsLabels), global::ColumnsLabels.Parser, new[]{ "Labels" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KMeansAnalysisRequest), global::KMeansAnalysisRequest.Parser, new[]{ "ColumnsNames", "ClustersNumber" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KMeansAnalysisResponse), global::KMeansAnalysisResponse.Parser, new[]{ "LabelsMapping", "Centroids" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Empty : pb::IMessage<Empty> {
  private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Empty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty(Empty other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty Clone() {
    return new Empty(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Empty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Empty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Empty other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class AvailableDatasetsList : pb::IMessage<AvailableDatasetsList> {
  private static readonly pb::MessageParser<AvailableDatasetsList> _parser = new pb::MessageParser<AvailableDatasetsList>(() => new AvailableDatasetsList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AvailableDatasetsList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AvailableDatasetsList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AvailableDatasetsList(AvailableDatasetsList other) : this() {
    datasetsPaths_ = other.datasetsPaths_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AvailableDatasetsList Clone() {
    return new AvailableDatasetsList(this);
  }

  /// <summary>Field number for the "datasetsPaths" field.</summary>
  public const int DatasetsPathsFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_datasetsPaths_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> datasetsPaths_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> DatasetsPaths {
    get { return datasetsPaths_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AvailableDatasetsList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AvailableDatasetsList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!datasetsPaths_.Equals(other.datasetsPaths_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= datasetsPaths_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    datasetsPaths_.WriteTo(output, _repeated_datasetsPaths_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += datasetsPaths_.CalculateSize(_repeated_datasetsPaths_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AvailableDatasetsList other) {
    if (other == null) {
      return;
    }
    datasetsPaths_.Add(other.datasetsPaths_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          datasetsPaths_.AddEntriesFrom(input, _repeated_datasetsPaths_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class LoadDatasetRequest : pb::IMessage<LoadDatasetRequest> {
  private static readonly pb::MessageParser<LoadDatasetRequest> _parser = new pb::MessageParser<LoadDatasetRequest>(() => new LoadDatasetRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoadDatasetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadDatasetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadDatasetRequest(LoadDatasetRequest other) : this() {
    datasetPath_ = other.datasetPath_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadDatasetRequest Clone() {
    return new LoadDatasetRequest(this);
  }

  /// <summary>Field number for the "datasetPath" field.</summary>
  public const int DatasetPathFieldNumber = 1;
  private string datasetPath_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DatasetPath {
    get { return datasetPath_; }
    set {
      datasetPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoadDatasetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoadDatasetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DatasetPath != other.DatasetPath) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DatasetPath.Length != 0) hash ^= DatasetPath.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DatasetPath.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DatasetPath);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DatasetPath.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DatasetPath);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoadDatasetRequest other) {
    if (other == null) {
      return;
    }
    if (other.DatasetPath.Length != 0) {
      DatasetPath = other.DatasetPath;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DatasetPath = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GenerateDatasetRequest : pb::IMessage<GenerateDatasetRequest> {
  private static readonly pb::MessageParser<GenerateDatasetRequest> _parser = new pb::MessageParser<GenerateDatasetRequest>(() => new GenerateDatasetRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GenerateDatasetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenerateDatasetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenerateDatasetRequest(GenerateDatasetRequest other) : this() {
    columnsAmount_ = other.columnsAmount_;
    rowsAmount_ = other.rowsAmount_;
    centersAmount_ = other.centersAmount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GenerateDatasetRequest Clone() {
    return new GenerateDatasetRequest(this);
  }

  /// <summary>Field number for the "columnsAmount" field.</summary>
  public const int ColumnsAmountFieldNumber = 1;
  private int columnsAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ColumnsAmount {
    get { return columnsAmount_; }
    set {
      columnsAmount_ = value;
    }
  }

  /// <summary>Field number for the "rowsAmount" field.</summary>
  public const int RowsAmountFieldNumber = 2;
  private int rowsAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RowsAmount {
    get { return rowsAmount_; }
    set {
      rowsAmount_ = value;
    }
  }

  /// <summary>Field number for the "centersAmount" field.</summary>
  public const int CentersAmountFieldNumber = 3;
  private int centersAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CentersAmount {
    get { return centersAmount_; }
    set {
      centersAmount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GenerateDatasetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GenerateDatasetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ColumnsAmount != other.ColumnsAmount) return false;
    if (RowsAmount != other.RowsAmount) return false;
    if (CentersAmount != other.CentersAmount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ColumnsAmount != 0) hash ^= ColumnsAmount.GetHashCode();
    if (RowsAmount != 0) hash ^= RowsAmount.GetHashCode();
    if (CentersAmount != 0) hash ^= CentersAmount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ColumnsAmount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ColumnsAmount);
    }
    if (RowsAmount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RowsAmount);
    }
    if (CentersAmount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CentersAmount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ColumnsAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnsAmount);
    }
    if (RowsAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowsAmount);
    }
    if (CentersAmount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CentersAmount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GenerateDatasetRequest other) {
    if (other == null) {
      return;
    }
    if (other.ColumnsAmount != 0) {
      ColumnsAmount = other.ColumnsAmount;
    }
    if (other.RowsAmount != 0) {
      RowsAmount = other.RowsAmount;
    }
    if (other.CentersAmount != 0) {
      CentersAmount = other.CentersAmount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ColumnsAmount = input.ReadInt32();
          break;
        }
        case 16: {
          RowsAmount = input.ReadInt32();
          break;
        }
        case 24: {
          CentersAmount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Column : pb::IMessage<Column> {
  private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Column> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Column() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Column(Column other) : this() {
    columnName_ = other.columnName_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Column Clone() {
    return new Column(this);
  }

  /// <summary>Field number for the "columnName" field.</summary>
  public const int ColumnNameFieldNumber = 1;
  private string columnName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ColumnName {
    get { return columnName_; }
    set {
      columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private string type_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Type {
    get { return type_; }
    set {
      type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Column);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Column other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ColumnName != other.ColumnName) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
    if (Type.Length != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ColumnName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ColumnName);
    }
    if (Type.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ColumnName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
    }
    if (Type.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Column other) {
    if (other == null) {
      return;
    }
    if (other.ColumnName.Length != 0) {
      ColumnName = other.ColumnName;
    }
    if (other.Type.Length != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ColumnName = input.ReadString();
          break;
        }
        case 18: {
          Type = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class DescriptiveStatisticsFeature : pb::IMessage<DescriptiveStatisticsFeature> {
  private static readonly pb::MessageParser<DescriptiveStatisticsFeature> _parser = new pb::MessageParser<DescriptiveStatisticsFeature>(() => new DescriptiveStatisticsFeature());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DescriptiveStatisticsFeature> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DescriptiveStatisticsFeature() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DescriptiveStatisticsFeature(DescriptiveStatisticsFeature other) : this() {
    name_ = other.name_;
    value_ = other.value_;
    featureType_ = other.featureType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DescriptiveStatisticsFeature Clone() {
    return new DescriptiveStatisticsFeature(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private string value_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Value {
    get { return value_; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "featureType" field.</summary>
  public const int FeatureTypeFieldNumber = 3;
  private string featureType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FeatureType {
    get { return featureType_; }
    set {
      featureType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DescriptiveStatisticsFeature);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DescriptiveStatisticsFeature other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Value != other.Value) return false;
    if (FeatureType != other.FeatureType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    if (FeatureType.Length != 0) hash ^= FeatureType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Value.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
    if (FeatureType.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(FeatureType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    if (FeatureType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DescriptiveStatisticsFeature other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
    if (other.FeatureType.Length != 0) {
      FeatureType = other.FeatureType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
        case 26: {
          FeatureType = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ColumnInfo : pb::IMessage<ColumnInfo> {
  private static readonly pb::MessageParser<ColumnInfo> _parser = new pb::MessageParser<ColumnInfo>(() => new ColumnInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ColumnInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColumnInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColumnInfo(ColumnInfo other) : this() {
    column_ = other.column_ != null ? other.column_.Clone() : null;
    descriptiveStatisticsFeatures_ = other.descriptiveStatisticsFeatures_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColumnInfo Clone() {
    return new ColumnInfo(this);
  }

  /// <summary>Field number for the "column" field.</summary>
  public const int ColumnFieldNumber = 1;
  private global::Column column_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Column Column {
    get { return column_; }
    set {
      column_ = value;
    }
  }

  /// <summary>Field number for the "descriptiveStatisticsFeatures" field.</summary>
  public const int DescriptiveStatisticsFeaturesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::DescriptiveStatisticsFeature> _repeated_descriptiveStatisticsFeatures_codec
      = pb::FieldCodec.ForMessage(18, global::DescriptiveStatisticsFeature.Parser);
  private readonly pbc::RepeatedField<global::DescriptiveStatisticsFeature> descriptiveStatisticsFeatures_ = new pbc::RepeatedField<global::DescriptiveStatisticsFeature>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DescriptiveStatisticsFeature> DescriptiveStatisticsFeatures {
    get { return descriptiveStatisticsFeatures_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ColumnInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ColumnInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Column, other.Column)) return false;
    if(!descriptiveStatisticsFeatures_.Equals(other.descriptiveStatisticsFeatures_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (column_ != null) hash ^= Column.GetHashCode();
    hash ^= descriptiveStatisticsFeatures_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (column_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Column);
    }
    descriptiveStatisticsFeatures_.WriteTo(output, _repeated_descriptiveStatisticsFeatures_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (column_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Column);
    }
    size += descriptiveStatisticsFeatures_.CalculateSize(_repeated_descriptiveStatisticsFeatures_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ColumnInfo other) {
    if (other == null) {
      return;
    }
    if (other.column_ != null) {
      if (column_ == null) {
        Column = new global::Column();
      }
      Column.MergeFrom(other.Column);
    }
    descriptiveStatisticsFeatures_.Add(other.descriptiveStatisticsFeatures_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (column_ == null) {
            Column = new global::Column();
          }
          input.ReadMessage(Column);
          break;
        }
        case 18: {
          descriptiveStatisticsFeatures_.AddEntriesFrom(input, _repeated_descriptiveStatisticsFeatures_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DatasetMetadata : pb::IMessage<DatasetMetadata> {
  private static readonly pb::MessageParser<DatasetMetadata> _parser = new pb::MessageParser<DatasetMetadata>(() => new DatasetMetadata());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DatasetMetadata> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatasetMetadata() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatasetMetadata(DatasetMetadata other) : this() {
    rowsCount_ = other.rowsCount_;
    columnsCount_ = other.columnsCount_;
    columnsInfo_ = other.columnsInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DatasetMetadata Clone() {
    return new DatasetMetadata(this);
  }

  /// <summary>Field number for the "rowsCount" field.</summary>
  public const int RowsCountFieldNumber = 1;
  private int rowsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RowsCount {
    get { return rowsCount_; }
    set {
      rowsCount_ = value;
    }
  }

  /// <summary>Field number for the "columnsCount" field.</summary>
  public const int ColumnsCountFieldNumber = 2;
  private int columnsCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ColumnsCount {
    get { return columnsCount_; }
    set {
      columnsCount_ = value;
    }
  }

  /// <summary>Field number for the "columnsInfo" field.</summary>
  public const int ColumnsInfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ColumnInfo> _repeated_columnsInfo_codec
      = pb::FieldCodec.ForMessage(26, global::ColumnInfo.Parser);
  private readonly pbc::RepeatedField<global::ColumnInfo> columnsInfo_ = new pbc::RepeatedField<global::ColumnInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ColumnInfo> ColumnsInfo {
    get { return columnsInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DatasetMetadata);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DatasetMetadata other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RowsCount != other.RowsCount) return false;
    if (ColumnsCount != other.ColumnsCount) return false;
    if(!columnsInfo_.Equals(other.columnsInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RowsCount != 0) hash ^= RowsCount.GetHashCode();
    if (ColumnsCount != 0) hash ^= ColumnsCount.GetHashCode();
    hash ^= columnsInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RowsCount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RowsCount);
    }
    if (ColumnsCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ColumnsCount);
    }
    columnsInfo_.WriteTo(output, _repeated_columnsInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RowsCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RowsCount);
    }
    if (ColumnsCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnsCount);
    }
    size += columnsInfo_.CalculateSize(_repeated_columnsInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DatasetMetadata other) {
    if (other == null) {
      return;
    }
    if (other.RowsCount != 0) {
      RowsCount = other.RowsCount;
    }
    if (other.ColumnsCount != 0) {
      ColumnsCount = other.ColumnsCount;
    }
    columnsInfo_.Add(other.columnsInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RowsCount = input.ReadInt32();
          break;
        }
        case 16: {
          ColumnsCount = input.ReadInt32();
          break;
        }
        case 26: {
          columnsInfo_.AddEntriesFrom(input, _repeated_columnsInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GetNormalisedDatasetRequest : pb::IMessage<GetNormalisedDatasetRequest> {
  private static readonly pb::MessageParser<GetNormalisedDatasetRequest> _parser = new pb::MessageParser<GetNormalisedDatasetRequest>(() => new GetNormalisedDatasetRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetNormalisedDatasetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetNormalisedDatasetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetNormalisedDatasetRequest(GetNormalisedDatasetRequest other) : this() {
    columnsNames_ = other.columnsNames_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetNormalisedDatasetRequest Clone() {
    return new GetNormalisedDatasetRequest(this);
  }

  /// <summary>Field number for the "columnsNames" field.</summary>
  public const int ColumnsNamesFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_columnsNames_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> columnsNames_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> ColumnsNames {
    get { return columnsNames_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetNormalisedDatasetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetNormalisedDatasetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!columnsNames_.Equals(other.columnsNames_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= columnsNames_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    columnsNames_.WriteTo(output, _repeated_columnsNames_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += columnsNames_.CalculateSize(_repeated_columnsNames_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetNormalisedDatasetRequest other) {
    if (other == null) {
      return;
    }
    columnsNames_.Add(other.columnsNames_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          columnsNames_.AddEntriesFrom(input, _repeated_columnsNames_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class NormalisedDataset : pb::IMessage<NormalisedDataset> {
  private static readonly pb::MessageParser<NormalisedDataset> _parser = new pb::MessageParser<NormalisedDataset>(() => new NormalisedDataset());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NormalisedDataset> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalisedDataset() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalisedDataset(NormalisedDataset other) : this() {
    rows_ = other.rows_.Clone();
    columnsNames_ = other.columnsNames_.Clone();
    columnsLabels_ = other.columnsLabels_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalisedDataset Clone() {
    return new NormalisedDataset(this);
  }

  /// <summary>Field number for the "rows" field.</summary>
  public const int RowsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NormalisedRow> _repeated_rows_codec
      = pb::FieldCodec.ForMessage(10, global::NormalisedRow.Parser);
  private readonly pbc::RepeatedField<global::NormalisedRow> rows_ = new pbc::RepeatedField<global::NormalisedRow>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NormalisedRow> Rows {
    get { return rows_; }
  }

  /// <summary>Field number for the "columnsNames" field.</summary>
  public const int ColumnsNamesFieldNumber = 2;
  private static readonly pb::FieldCodec<string> _repeated_columnsNames_codec
      = pb::FieldCodec.ForString(18);
  private readonly pbc::RepeatedField<string> columnsNames_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> ColumnsNames {
    get { return columnsNames_; }
  }

  /// <summary>Field number for the "columnsLabels" field.</summary>
  public const int ColumnsLabelsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ColumnsLabels> _repeated_columnsLabels_codec
      = pb::FieldCodec.ForMessage(26, global::ColumnsLabels.Parser);
  private readonly pbc::RepeatedField<global::ColumnsLabels> columnsLabels_ = new pbc::RepeatedField<global::ColumnsLabels>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ColumnsLabels> ColumnsLabels {
    get { return columnsLabels_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NormalisedDataset);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NormalisedDataset other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rows_.Equals(other.rows_)) return false;
    if(!columnsNames_.Equals(other.columnsNames_)) return false;
    if(!columnsLabels_.Equals(other.columnsLabels_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rows_.GetHashCode();
    hash ^= columnsNames_.GetHashCode();
    hash ^= columnsLabels_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rows_.WriteTo(output, _repeated_rows_codec);
    columnsNames_.WriteTo(output, _repeated_columnsNames_codec);
    columnsLabels_.WriteTo(output, _repeated_columnsLabels_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rows_.CalculateSize(_repeated_rows_codec);
    size += columnsNames_.CalculateSize(_repeated_columnsNames_codec);
    size += columnsLabels_.CalculateSize(_repeated_columnsLabels_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NormalisedDataset other) {
    if (other == null) {
      return;
    }
    rows_.Add(other.rows_);
    columnsNames_.Add(other.columnsNames_);
    columnsLabels_.Add(other.columnsLabels_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          rows_.AddEntriesFrom(input, _repeated_rows_codec);
          break;
        }
        case 18: {
          columnsNames_.AddEntriesFrom(input, _repeated_columnsNames_codec);
          break;
        }
        case 26: {
          columnsLabels_.AddEntriesFrom(input, _repeated_columnsLabels_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class NormalisedRow : pb::IMessage<NormalisedRow> {
  private static readonly pb::MessageParser<NormalisedRow> _parser = new pb::MessageParser<NormalisedRow>(() => new NormalisedRow());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NormalisedRow> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalisedRow() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalisedRow(NormalisedRow other) : this() {
    values_ = other.values_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NormalisedRow Clone() {
    return new NormalisedRow(this);
  }

  /// <summary>Field number for the "values" field.</summary>
  public const int ValuesFieldNumber = 1;
  private static readonly pb::FieldCodec<float> _repeated_values_codec
      = pb::FieldCodec.ForFloat(10);
  private readonly pbc::RepeatedField<float> values_ = new pbc::RepeatedField<float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<float> Values {
    get { return values_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NormalisedRow);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NormalisedRow other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!values_.Equals(other.values_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= values_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    values_.WriteTo(output, _repeated_values_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += values_.CalculateSize(_repeated_values_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NormalisedRow other) {
    if (other == null) {
      return;
    }
    values_.Add(other.values_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 13: {
          values_.AddEntriesFrom(input, _repeated_values_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ColumnsLabels : pb::IMessage<ColumnsLabels> {
  private static readonly pb::MessageParser<ColumnsLabels> _parser = new pb::MessageParser<ColumnsLabels>(() => new ColumnsLabels());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ColumnsLabels> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColumnsLabels() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColumnsLabels(ColumnsLabels other) : this() {
    labels_ = other.labels_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColumnsLabels Clone() {
    return new ColumnsLabels(this);
  }

  /// <summary>Field number for the "labels" field.</summary>
  public const int LabelsFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_labels_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> labels_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Labels {
    get { return labels_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ColumnsLabels);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ColumnsLabels other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!labels_.Equals(other.labels_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= labels_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    labels_.WriteTo(output, _repeated_labels_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += labels_.CalculateSize(_repeated_labels_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ColumnsLabels other) {
    if (other == null) {
      return;
    }
    labels_.Add(other.labels_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          labels_.AddEntriesFrom(input, _repeated_labels_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class KMeansAnalysisRequest : pb::IMessage<KMeansAnalysisRequest> {
  private static readonly pb::MessageParser<KMeansAnalysisRequest> _parser = new pb::MessageParser<KMeansAnalysisRequest>(() => new KMeansAnalysisRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KMeansAnalysisRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KMeansAnalysisRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KMeansAnalysisRequest(KMeansAnalysisRequest other) : this() {
    columnsNames_ = other.columnsNames_.Clone();
    clustersNumber_ = other.clustersNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KMeansAnalysisRequest Clone() {
    return new KMeansAnalysisRequest(this);
  }

  /// <summary>Field number for the "columnsNames" field.</summary>
  public const int ColumnsNamesFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_columnsNames_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> columnsNames_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> ColumnsNames {
    get { return columnsNames_; }
  }

  /// <summary>Field number for the "clustersNumber" field.</summary>
  public const int ClustersNumberFieldNumber = 2;
  private int clustersNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClustersNumber {
    get { return clustersNumber_; }
    set {
      clustersNumber_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KMeansAnalysisRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KMeansAnalysisRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!columnsNames_.Equals(other.columnsNames_)) return false;
    if (ClustersNumber != other.ClustersNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= columnsNames_.GetHashCode();
    if (ClustersNumber != 0) hash ^= ClustersNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    columnsNames_.WriteTo(output, _repeated_columnsNames_codec);
    if (ClustersNumber != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ClustersNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += columnsNames_.CalculateSize(_repeated_columnsNames_codec);
    if (ClustersNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClustersNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KMeansAnalysisRequest other) {
    if (other == null) {
      return;
    }
    columnsNames_.Add(other.columnsNames_);
    if (other.ClustersNumber != 0) {
      ClustersNumber = other.ClustersNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          columnsNames_.AddEntriesFrom(input, _repeated_columnsNames_codec);
          break;
        }
        case 16: {
          ClustersNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class KMeansAnalysisResponse : pb::IMessage<KMeansAnalysisResponse> {
  private static readonly pb::MessageParser<KMeansAnalysisResponse> _parser = new pb::MessageParser<KMeansAnalysisResponse>(() => new KMeansAnalysisResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KMeansAnalysisResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImmvisReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KMeansAnalysisResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KMeansAnalysisResponse(KMeansAnalysisResponse other) : this() {
    labelsMapping_ = other.labelsMapping_ != null ? other.labelsMapping_.Clone() : null;
    centroids_ = other.centroids_ != null ? other.centroids_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KMeansAnalysisResponse Clone() {
    return new KMeansAnalysisResponse(this);
  }

  /// <summary>Field number for the "labelsMapping" field.</summary>
  public const int LabelsMappingFieldNumber = 1;
  private global::NormalisedDataset labelsMapping_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NormalisedDataset LabelsMapping {
    get { return labelsMapping_; }
    set {
      labelsMapping_ = value;
    }
  }

  /// <summary>Field number for the "centroids" field.</summary>
  public const int CentroidsFieldNumber = 2;
  private global::NormalisedDataset centroids_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::NormalisedDataset Centroids {
    get { return centroids_; }
    set {
      centroids_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KMeansAnalysisResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KMeansAnalysisResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(LabelsMapping, other.LabelsMapping)) return false;
    if (!object.Equals(Centroids, other.Centroids)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (labelsMapping_ != null) hash ^= LabelsMapping.GetHashCode();
    if (centroids_ != null) hash ^= Centroids.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (labelsMapping_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(LabelsMapping);
    }
    if (centroids_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Centroids);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (labelsMapping_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LabelsMapping);
    }
    if (centroids_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Centroids);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KMeansAnalysisResponse other) {
    if (other == null) {
      return;
    }
    if (other.labelsMapping_ != null) {
      if (labelsMapping_ == null) {
        LabelsMapping = new global::NormalisedDataset();
      }
      LabelsMapping.MergeFrom(other.LabelsMapping);
    }
    if (other.centroids_ != null) {
      if (centroids_ == null) {
        Centroids = new global::NormalisedDataset();
      }
      Centroids.MergeFrom(other.Centroids);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (labelsMapping_ == null) {
            LabelsMapping = new global::NormalisedDataset();
          }
          input.ReadMessage(LabelsMapping);
          break;
        }
        case 18: {
          if (centroids_ == null) {
            Centroids = new global::NormalisedDataset();
          }
          input.ReadMessage(Centroids);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
